name: Unpack release asset into project/
on:
  workflow_dispatch:
    inputs:
      asset_name:
        description: 'Имя файла из Releases (например: deep-resolver.tar.gz)'
        required: false
        default: 'deep-resolver.tar.gz'

permissions:
  contents: write

jobs:
  unpack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with creds)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install tools
        run: |
          set -euxo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq unzip p7zip-full rsync

      - name: Pick & download latest release asset
        id: pick
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          API="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          NAME="${{ github.event.inputs.asset_name }}"
          JSON="$(curl -fsSL -H "authorization: Bearer $GH_TOKEN" "$API")"

          if [ -n "$NAME" ]; then
            URL=$(echo "$JSON" | jq -r --arg n "$NAME" '.assets[] | select(.name==$n) | .browser_download_url')
          else
            URL=$(echo "$JSON" | jq -r '.assets[0].browser_download_url')
          fi
          [ -n "$URL" ] && [ "$URL" != "null" ]

          mkdir -p _zip
          FILE="_zip/$(basename "$URL")"
          curl -fL "$URL" -o "$FILE"

          echo "file=$FILE"   >> $GITHUB_OUTPUT
          echo "name=$(basename "$FILE")" >> $GITHUB_OUTPUT
          ls -lh _zip

      - name: Unpack and CLEAN
        run: |
          set -euxo pipefail
          FILE='${{ steps.pick.outputs.file }}'
          rm -rf _unpacked project
          mkdir -p _unpacked

          case "$FILE" in
            *.tar.gz|*.tgz) tar -xzf "$FILE" -C _unpacked ;;
            *.zip)          unzip -q "$FILE" -d _unpacked ;;
            *)              7z x "$FILE" -o_unpacked ;;
          esac

          # расплющить единственную верхнюю папку
          cd _unpacked
          DCOUNT=$(find . -maxdepth 1 -type d | wc -l || true)
          if [ "$DCOUNT" -eq 2 ]; then
            TOP=$(find . -maxdepth 1 -type d ! -name '.' | head -n1)
            shopt -s dotglob nullglob
            mv "$TOP"/* ./
            rmdir "$TOP" || true
          fi

          # удалить секреты/тяжёлые кеши
          find . -maxdepth 3 -type f -name ".env*" -delete || true
          rm -rf .puppeteer-cache node_modules dist build _zip .git || true

          cd ..
          mkdir -p project
          rsync -a --delete _unpacked/ project/

          # .gitignore в корне, чтобы мусор не попадал в коммиты
          cat > .gitignore <<'EOF'
_zip/
_unpacked/
project/.puppeteer-cache/
project/node_modules/
project/dist/
project/build/
.env
.env.*
project/.env
project/.env.*
*.log
*.sqlite
*.db
EOF

      - name: Commit & PUSH to main (with diagnostics)
        env:
          BRANCH: main
        run: |
          set -euxo pipefail
          git status
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # убедимся, что есть origin и нужная ветка
          git remote -v
          git branch -a

          git add -A
          git commit -m "Unpacked latest release asset into project/ [skip ci]" || echo "Nothing to commit"
          # Явно пушим в main
          git push origin HEAD:${BRANCH}

          echo "HEAD=$(git rev-parse HEAD)"
          echo "Branch=${BRANCH}"
