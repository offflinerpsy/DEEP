name: Unpack release asset into project/
on:
  workflow_dispatch:
    inputs:
      asset_name:
        description: 'Имя файла из Releases (например: deep-resolver.tar.gz)'
        required: false
        default: ''
permissions:
  contents: write

jobs:
  unpack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Install tools
        run: |
          set -euxo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq unzip p7zip-full

      - name: Pick asset from latest release
        id: pick
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          API="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          JSON="$(curl -fsSL -H "authorization: Bearer $GH_TOKEN" "$API")"

          INPUT="${{ github.event.inputs.asset_name }}"
          if [ -n "$INPUT" ]; then
            URL=$(echo "$JSON" | jq -r --arg n "$INPUT" '.assets[] | select(.name==$n) | .browser_download_url')
          else
            # Сначала пробуем tar.gz/tgz, потом zip; иначе — первый ассет
            URL=$(echo "$JSON" | jq -r '.assets[] | select(.name|test("\\.(tar\\.gz|tgz)$")) | .browser_download_url' | head -n1)
            if [ -z "$URL" ] || [ "$URL" = "null" ]; then
              URL=$(echo "$JSON" | jq -r '.assets[] | select(.name|test("\\.zip$")) | .browser_download_url' | head -n1)
            fi
            if [ -z "$URL" ] || [ "$URL" = "null" ]; then
              URL=$(echo "$JSON" | jq -r '.assets[0].browser_download_url')
            fi
          fi

          test -n "$URL"
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "name=$(basename "$URL")" >> "$GITHUB_OUTPUT"

      - name: Download asset
        run: |
          set -euxo pipefail
          mkdir -p _zip
          curl -fL '${{ steps.pick.outputs.url }}' -o _zip/'${{ steps.pick.outputs.name }}'
          ls -lh _zip

      - name: Unpack into project/
        run: |
          set -euxo pipefail
          FILE="_zip/${{ steps.pick.outputs.name }}"
          rm -rf project && mkdir -p project

          case "$FILE" in
            *.tar.gz|*.tgz) tar -xzf "$FILE" -C project ;;
            *.zip)          unzip -q "$FILE" -d project ;;
            *)              7z x "$FILE" -oproject ;;
          esac

          # расплющить одну верхнюю папку, если она есть
          cd project
          DCOUNT=$(find . -maxdepth 1 -type d | wc -l)
          if [ "$DCOUNT" -eq 2 ]; then
            TOP=$(find . -maxdepth 1 -type d ! -name '.' | head -n1)
            shopt -s dotglob nullglob
            mv "$TOP"/* ./
            rmdir "$TOP" || true
          fi
          echo "Unpacked tree top-level:"
          find . -maxdepth 2 -mindepth 1 -print | sed 's/^/ - /'

      - name: Commit unpacked tree
        run: |
          set -euxo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Unpacked latest release asset into project/ [skip ci]" || echo "Nothing to commit"
          git push
